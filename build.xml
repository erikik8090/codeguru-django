<?xml version="1.0" encoding="utf-8" ?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:sonar="antlib:org.sonar.ant"
         name="codewars_riscv" default="build" basedir=".">

  <!-- Arguments to gwtc and devmode targets -->
  <property name="gwt.args" value="" />

  <property file="build.properties"/>
  <!-- Configure path to GWT SDK -->

    <target name="ivy-check">
        <available file="${user.home}/.ant/lib/ivy.jar" property="ivy.isInstalled"/>
    </target>

    <target name="bootstrap" description="Install ivy" depends="ivy-check" unless="ivy.isInstalled">
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
    </target>

  <target name="resolve" depends="bootstrap" description="Retrieve dependencies with Ivy">
    <ivy:retrieve/>
    <ivy:report todir='${reports.dir}/ivy' graph='false' xml='false'/>

    <ivy:cachepath pathid="compile.path"  conf="compile"/>
    <ivy:cachepath pathid="test.path"     conf="test"/>
    <ivy:cachepath pathid="build.path"    conf="build"/>
    <ivy:cachepath pathid="provided.path" conf="provided"/>
  </target>

  <target name="libs" depends="resolve" description="Copy libs to WEB-INF/lib">
    <mkdir dir="${output.dir}/WEB-INF/lib" />
    <copy todir="${output.dir}/WEB-INF/lib" flatten="true">
      <path refid="provided.path"/>
    </copy>
  </target>

  <target name="javac" depends="libs" description="Compile java source to bytecode">
    <mkdir dir="${class.dir}"/>
    <javac srcdir="src" includes="**" encoding="utf-8"
        destdir="${class.dir}"
        source="8" target="8" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath>
        <path refid="compile.path"/>
      </classpath>
    </javac>
    <copy todir="${class.dir}">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="console" depends="libs" description="Compile java source to console application">
    <mkdir dir="console"/>
    <mkdir dir="console/build"/>
    <javac srcdir="src" includes="**" encoding="utf-8"
           destdir="console/build"
           source="8" target="8" nowarn="true"
           debug="true" debuglevel="lines,vars,source">
      <classpath>
        <path refid="compile.path"/>
      </classpath>
    </javac>
    <jar destfile="console/corewars-risc-v.jar" basedir="console/build" manifest="console.mf">

    </jar>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="512m">
      <classpath>
        <pathelement location="src"/>
        <path refid="compile.path"/>
      </classpath>
      <arg line="-war"/>
      <arg value="${output.dir}"/>
      <arg line="${gwt.args}"/>
      <arg value="com.codewars_js"/>

      <arg value="-style"/>
      <arg value="PRETTY"/>

      <arg value="-XmethodNameDisplayMode"/>
      <arg value="FULL"/>

    </java>
  </target>

  <target name="devmode" depends="javac" description="Run development mode (pass -Dgwt.args=-nosuperDevMode to fallback to classic DevMode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode" maxmemory="1g">
      <classpath>
        <pathelement location="src"/>
        <path refid="compile.path"/>
      </classpath>
      <arg value="-startupUrl"/>
      <arg value="page.html"/>
      <arg line="-war"/>
      <arg value="${output.dir}"/>
      <arg line="${gwt.args}"/>
      <arg value="com.codewars_js"/>

      <arg value="-XmethodNameDisplayMode"/>
      <arg value="FULL"/>

      <arg value="-style"/>
      <arg value="PRETTY"/>
    </java>
  </target>

  <target name="javac.tests" depends="javac" description="Compiles test code">
    <javac srcdir="test" includes="**" encoding="utf-8"
      source="1.7" target="1.7" nowarn="true"
      destdir="${class.dir}"
      debug="true" debuglevel="lines,vars,source">
      <classpath refid="test.path"/>
    </javac>
  </target>

  <target name="test" depends="javac.tests" description="Run unit tests and record code coverage">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="build.path"/>
    <mkdir dir="${junit.reports.dir}" />
    <jacoco:coverage destfile="${jacoco.exec.file}" excludes="*Test*:org.apache.*:com.client.*">
      <junit fork="yes" forkmode="perTest" printsummary="yes" haltonfailure="yes" maxmemory="256m">
        <sysproperty key="gwt.args" value="-devMode -logLevel WARN -war www-test" />
        <sysproperty key="java.awt.headless" value="true" />
        <classpath>
          <pathelement location="${class.dir}"/>
          <path refid="test.path"/>
        </classpath>
        <batchtest todir="${junit.reports.dir}" >
          <fileset dir="test" >
            <include name="**/*.java" />
          </fileset>
        </batchtest>
        <formatter type="plain"/>
        <formatter type="xml" />
      </junit>
    </jacoco:coverage>
  </target>

  <target name="report" depends="test">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="build.path"/>
    <jacoco:report>
      <executiondata>
        <file file="${jacoco.exec.file}"/>
      </executiondata>
      <structure name="JaCoCo Development">
        <classfiles>
          <fileset dir="${class.dir}">
            <exclude name="**/*Test*.class"/>
            <exclude name="org/apache/**/*"/>
            <exclude name="com/client/**/*"/>
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.dir}"/>
        </sourcefiles>
      </structure>
      <!--  to produce reports in different formats.  -->
      <html destdir="${jacoco.report.dir}"/>
      <csv destfile="${jacoco.report.dir}/report.csv"/>
      <xml destfile="${jacoco.report.dir}/report.xml"/>
    </jacoco:report>
  </target>

  <target name="sonar" depends="resolve">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml" classpathref="build.path"/>

    <ivy:cachepath pathid="sonar.libraries" conf="compile"/>

    <sonar:sonar xmlns:sonar="antlib:org.sonar.ant"/>
  </target>

  <target name="build" depends="gwtc" description="Build this project" />

  <target name="war" depends="build" description="Create a war file">
    <zip destfile="codewars_js.war" basedir="war"/>
  </target>

  <target name="clean" description="Cleans this project">
    <delete dir="${class.dir}" failonerror="false" />
    <delete dir="${output.dir}/codewars_js" failonerror="false" />
  </target>



</project>
